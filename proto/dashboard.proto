syntax = "proto3";

package dashboard;

option go_package = "./pb";
option java_package = "com.example.dashboard";
option swift_prefix = "Dashboard";

// The main dashboard state containing all fields
message DashboardState {
  // Text fields
  string title = 1;
  string description = 2;
  string status_message = 3;
  
  // Boolean switches
  bool is_enabled = 4;
  bool maintenance_mode = 5;
  bool notifications_on = 6;
  
  // Numeric fields
  int32 user_count = 7;
  double temperature = 8;
  int32 progress_percentage = 9;
  
  // Enum field for dropdown/selection
  Priority priority = 10;
  
  // Timestamp for last update
  int64 last_updated = 11;
  
  // Additional config as key-value pairs
  map<string, string> config = 12;
}

// Priority enum for dropdown selection
enum Priority {
  PRIORITY_UNSPECIFIED = 0;
  PRIORITY_LOW = 1;
  PRIORITY_MEDIUM = 2;
  PRIORITY_HIGH = 3;
  PRIORITY_CRITICAL = 4;
}

// Request to get current dashboard state
message GetDashboardRequest {
  // Could add filters or specific field requests here if needed
}

// Response with current dashboard state
message GetDashboardResponse {
  DashboardState state = 1;
}

// Request to update specific fields
message UpdateDashboardRequest {
  // Using field_mask would be more proper, but for simplicity:
  // Client sends only the fields they want to update
  DashboardState updates = 1;
  // List of field names being updated
  repeated string updated_fields = 2;
}

// Response after update
message UpdateDashboardResponse {
  bool success = 1;
  string message = 2;
  DashboardState state = 3;
}

// Stream request for real-time updates
message StreamDashboardRequest {
  // Client ID for tracking
  string client_id = 1;
}

// Stream response with updates
message StreamDashboardResponse {
  DashboardState state = 1;
  string updated_by = 2;
  repeated string updated_fields = 3;
}

// The Dashboard service definition
service DashboardService {
  // Get current dashboard state
  rpc GetDashboard(GetDashboardRequest) returns (GetDashboardResponse);
  
  // Update dashboard fields
  rpc UpdateDashboard(UpdateDashboardRequest) returns (UpdateDashboardResponse);
  
  // Stream dashboard updates (server-side streaming)
  rpc StreamDashboard(StreamDashboardRequest) returns (stream StreamDashboardResponse);
  
  // Bidirectional streaming for real-time sync
  rpc SyncDashboard(stream UpdateDashboardRequest) returns (stream StreamDashboardResponse);
}
