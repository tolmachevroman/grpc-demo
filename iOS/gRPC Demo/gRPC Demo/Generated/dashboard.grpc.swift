// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the gRPC Swift generator plugin for the protocol buffer compiler.
// Source: dashboard.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/grpc/grpc-swift

import GRPCCore
import GRPCProtobuf

// MARK: - dashboard.DashboardService

/// Namespace containing generated types for the "dashboard.DashboardService" service.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
internal enum Dashboard_DashboardService {
    /// Service descriptor for the "dashboard.DashboardService" service.
    internal static let descriptor = GRPCCore.ServiceDescriptor(fullyQualifiedService: "dashboard.DashboardService")
    /// Namespace for method metadata.
    internal enum Method {
        /// Namespace for "GetDashboard" metadata.
        internal enum GetDashboard {
            /// Request type for "GetDashboard".
            internal typealias Input = Dashboard_GetDashboardRequest
            /// Response type for "GetDashboard".
            internal typealias Output = Dashboard_GetDashboardResponse
            /// Descriptor for "GetDashboard".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "dashboard.DashboardService"),
                method: "GetDashboard"
            )
        }
        /// Namespace for "UpdateDashboard" metadata.
        internal enum UpdateDashboard {
            /// Request type for "UpdateDashboard".
            internal typealias Input = Dashboard_UpdateDashboardRequest
            /// Response type for "UpdateDashboard".
            internal typealias Output = Dashboard_UpdateDashboardResponse
            /// Descriptor for "UpdateDashboard".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "dashboard.DashboardService"),
                method: "UpdateDashboard"
            )
        }
        /// Namespace for "StreamDashboard" metadata.
        internal enum StreamDashboard {
            /// Request type for "StreamDashboard".
            internal typealias Input = Dashboard_StreamDashboardRequest
            /// Response type for "StreamDashboard".
            internal typealias Output = Dashboard_StreamDashboardResponse
            /// Descriptor for "StreamDashboard".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "dashboard.DashboardService"),
                method: "StreamDashboard"
            )
        }
        /// Namespace for "SyncDashboard" metadata.
        internal enum SyncDashboard {
            /// Request type for "SyncDashboard".
            internal typealias Input = Dashboard_SyncDashboardRequest
            /// Response type for "SyncDashboard".
            internal typealias Output = Dashboard_SyncDashboardResponse
            /// Descriptor for "SyncDashboard".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "dashboard.DashboardService"),
                method: "SyncDashboard"
            )
        }
        /// Descriptors for all methods in the "dashboard.DashboardService" service.
        internal static let descriptors: [GRPCCore.MethodDescriptor] = [
            GetDashboard.descriptor,
            UpdateDashboard.descriptor,
            StreamDashboard.descriptor,
            SyncDashboard.descriptor
        ]
    }
}

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension GRPCCore.ServiceDescriptor {
    /// Service descriptor for the "dashboard.DashboardService" service.
    internal static let dashboard_DashboardService = GRPCCore.ServiceDescriptor(fullyQualifiedService: "dashboard.DashboardService")
}

// MARK: dashboard.DashboardService (client)

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Dashboard_DashboardService {
    /// Generated client protocol for the "dashboard.DashboardService" service.
    ///
    /// You don't need to implement this protocol directly, use the generated
    /// implementation, ``Client``.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Dashboard service definition
    internal protocol ClientProtocol: Sendable {
        /// Call the "GetDashboard" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Get current dashboard state
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Dashboard_GetDashboardRequest` message.
        ///   - serializer: A serializer for `Dashboard_GetDashboardRequest` messages.
        ///   - deserializer: A deserializer for `Dashboard_GetDashboardResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getDashboard<Result>(
            request: GRPCCore.ClientRequest<Dashboard_GetDashboardRequest>,
            serializer: some GRPCCore.MessageSerializer<Dashboard_GetDashboardRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Dashboard_GetDashboardResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Dashboard_GetDashboardResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "UpdateDashboard" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Update dashboard state
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Dashboard_UpdateDashboardRequest` message.
        ///   - serializer: A serializer for `Dashboard_UpdateDashboardRequest` messages.
        ///   - deserializer: A deserializer for `Dashboard_UpdateDashboardResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func updateDashboard<Result>(
            request: GRPCCore.ClientRequest<Dashboard_UpdateDashboardRequest>,
            serializer: some GRPCCore.MessageSerializer<Dashboard_UpdateDashboardRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Dashboard_UpdateDashboardResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Dashboard_UpdateDashboardResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "StreamDashboard" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Stream dashboard updates (server streaming)
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Dashboard_StreamDashboardRequest` message.
        ///   - serializer: A serializer for `Dashboard_StreamDashboardRequest` messages.
        ///   - deserializer: A deserializer for `Dashboard_StreamDashboardResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func streamDashboard<Result>(
            request: GRPCCore.ClientRequest<Dashboard_StreamDashboardRequest>,
            serializer: some GRPCCore.MessageSerializer<Dashboard_StreamDashboardRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Dashboard_StreamDashboardResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Dashboard_StreamDashboardResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "SyncDashboard" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Bidirectional sync stream
        ///
        /// - Parameters:
        ///   - request: A streaming request producing `Dashboard_SyncDashboardRequest` messages.
        ///   - serializer: A serializer for `Dashboard_SyncDashboardRequest` messages.
        ///   - deserializer: A deserializer for `Dashboard_SyncDashboardResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func syncDashboard<Result>(
            request: GRPCCore.StreamingClientRequest<Dashboard_SyncDashboardRequest>,
            serializer: some GRPCCore.MessageSerializer<Dashboard_SyncDashboardRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Dashboard_SyncDashboardResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Dashboard_SyncDashboardResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable
    }

    /// Generated client for the "dashboard.DashboardService" service.
    ///
    /// The ``Client`` provides an implementation of ``ClientProtocol`` which wraps
    /// a `GRPCCore.GRPCCClient`. The underlying `GRPCClient` provides the long-lived
    /// means of communication with the remote peer.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Dashboard service definition
    internal struct Client<Transport>: ClientProtocol where Transport: GRPCCore.ClientTransport {
        private let client: GRPCCore.GRPCClient<Transport>

        /// Creates a new client wrapping the provided `GRPCCore.GRPCClient`.
        ///
        /// - Parameters:
        ///   - client: A `GRPCCore.GRPCClient` providing a communication channel to the service.
        internal init(wrapping client: GRPCCore.GRPCClient<Transport>) {
            self.client = client
        }

        /// Call the "GetDashboard" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Get current dashboard state
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Dashboard_GetDashboardRequest` message.
        ///   - serializer: A serializer for `Dashboard_GetDashboardRequest` messages.
        ///   - deserializer: A deserializer for `Dashboard_GetDashboardResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func getDashboard<Result>(
            request: GRPCCore.ClientRequest<Dashboard_GetDashboardRequest>,
            serializer: some GRPCCore.MessageSerializer<Dashboard_GetDashboardRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Dashboard_GetDashboardResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Dashboard_GetDashboardResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Dashboard_DashboardService.Method.GetDashboard.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "UpdateDashboard" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Update dashboard state
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Dashboard_UpdateDashboardRequest` message.
        ///   - serializer: A serializer for `Dashboard_UpdateDashboardRequest` messages.
        ///   - deserializer: A deserializer for `Dashboard_UpdateDashboardResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func updateDashboard<Result>(
            request: GRPCCore.ClientRequest<Dashboard_UpdateDashboardRequest>,
            serializer: some GRPCCore.MessageSerializer<Dashboard_UpdateDashboardRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Dashboard_UpdateDashboardResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Dashboard_UpdateDashboardResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Dashboard_DashboardService.Method.UpdateDashboard.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "StreamDashboard" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Stream dashboard updates (server streaming)
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Dashboard_StreamDashboardRequest` message.
        ///   - serializer: A serializer for `Dashboard_StreamDashboardRequest` messages.
        ///   - deserializer: A deserializer for `Dashboard_StreamDashboardResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func streamDashboard<Result>(
            request: GRPCCore.ClientRequest<Dashboard_StreamDashboardRequest>,
            serializer: some GRPCCore.MessageSerializer<Dashboard_StreamDashboardRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Dashboard_StreamDashboardResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Dashboard_StreamDashboardResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable {
            try await self.client.serverStreaming(
                request: request,
                descriptor: Dashboard_DashboardService.Method.StreamDashboard.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "SyncDashboard" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Bidirectional sync stream
        ///
        /// - Parameters:
        ///   - request: A streaming request producing `Dashboard_SyncDashboardRequest` messages.
        ///   - serializer: A serializer for `Dashboard_SyncDashboardRequest` messages.
        ///   - deserializer: A deserializer for `Dashboard_SyncDashboardResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func syncDashboard<Result>(
            request: GRPCCore.StreamingClientRequest<Dashboard_SyncDashboardRequest>,
            serializer: some GRPCCore.MessageSerializer<Dashboard_SyncDashboardRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Dashboard_SyncDashboardResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Dashboard_SyncDashboardResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable {
            try await self.client.bidirectionalStreaming(
                request: request,
                descriptor: Dashboard_DashboardService.Method.SyncDashboard.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }
    }
}

// Helpers providing default arguments to 'ClientProtocol' methods.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Dashboard_DashboardService.ClientProtocol {
    /// Call the "GetDashboard" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Get current dashboard state
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Dashboard_GetDashboardRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func getDashboard<Result>(
        request: GRPCCore.ClientRequest<Dashboard_GetDashboardRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Dashboard_GetDashboardResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getDashboard(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Dashboard_GetDashboardRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Dashboard_GetDashboardResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpdateDashboard" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Update dashboard state
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Dashboard_UpdateDashboardRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func updateDashboard<Result>(
        request: GRPCCore.ClientRequest<Dashboard_UpdateDashboardRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Dashboard_UpdateDashboardResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.updateDashboard(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Dashboard_UpdateDashboardRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Dashboard_UpdateDashboardResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "StreamDashboard" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Stream dashboard updates (server streaming)
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Dashboard_StreamDashboardRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func streamDashboard<Result>(
        request: GRPCCore.ClientRequest<Dashboard_StreamDashboardRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Dashboard_StreamDashboardResponse>) async throws -> Result
    ) async throws -> Result where Result: Sendable {
        try await self.streamDashboard(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Dashboard_StreamDashboardRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Dashboard_StreamDashboardResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "SyncDashboard" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Bidirectional sync stream
    ///
    /// - Parameters:
    ///   - request: A streaming request producing `Dashboard_SyncDashboardRequest` messages.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func syncDashboard<Result>(
        request: GRPCCore.StreamingClientRequest<Dashboard_SyncDashboardRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Dashboard_SyncDashboardResponse>) async throws -> Result
    ) async throws -> Result where Result: Sendable {
        try await self.syncDashboard(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Dashboard_SyncDashboardRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Dashboard_SyncDashboardResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }
}

// Helpers providing sugared APIs for 'ClientProtocol' methods.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Dashboard_DashboardService.ClientProtocol {
    /// Call the "GetDashboard" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Get current dashboard state
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func getDashboard<Result>(
        _ message: Dashboard_GetDashboardRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Dashboard_GetDashboardResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Dashboard_GetDashboardRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getDashboard(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpdateDashboard" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Update dashboard state
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func updateDashboard<Result>(
        _ message: Dashboard_UpdateDashboardRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Dashboard_UpdateDashboardResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Dashboard_UpdateDashboardRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.updateDashboard(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "StreamDashboard" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Stream dashboard updates (server streaming)
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func streamDashboard<Result>(
        _ message: Dashboard_StreamDashboardRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Dashboard_StreamDashboardResponse>) async throws -> Result
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Dashboard_StreamDashboardRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.streamDashboard(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "SyncDashboard" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Bidirectional sync stream
    ///
    /// - Parameters:
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - producer: A closure producing request messages to send to the server. The request
    ///       stream is closed when the closure returns.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func syncDashboard<Result>(
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        requestProducer producer: @Sendable @escaping (GRPCCore.RPCWriter<Dashboard_SyncDashboardRequest>) async throws -> Void,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Dashboard_SyncDashboardResponse>) async throws -> Result
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.StreamingClientRequest<Dashboard_SyncDashboardRequest>(
            metadata: metadata,
            producer: producer
        )
        return try await self.syncDashboard(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }
}