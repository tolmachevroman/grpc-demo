// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "dashboard.proto" (package "dashboard", syntax proto3)
// tslint:disable
import type { RpcTransport } from '@protobuf-ts/runtime-rpc';
import type { ServiceInfo } from '@protobuf-ts/runtime-rpc';
import { DashboardService } from './dashboard';
import type { DuplexStreamingCall } from '@protobuf-ts/runtime-rpc';
import type { StreamDashboardResponse } from './dashboard';
import type { StreamDashboardRequest } from './dashboard';
import type { ServerStreamingCall } from '@protobuf-ts/runtime-rpc';
import type { UpdateDashboardResponse } from './dashboard';
import type { UpdateDashboardRequest } from './dashboard';
import { stackIntercept } from '@protobuf-ts/runtime-rpc';
import type { GetDashboardResponse } from './dashboard';
import type { GetDashboardRequest } from './dashboard';
import type { UnaryCall } from '@protobuf-ts/runtime-rpc';
import type { RpcOptions } from '@protobuf-ts/runtime-rpc';
/**
 * The Dashboard service definition
 *
 * @generated from protobuf service dashboard.DashboardService
 */
export interface IDashboardServiceClient {
  /**
   * Get current dashboard state
   *
   * @generated from protobuf rpc: GetDashboard
   */
  getDashboard(input: GetDashboardRequest, options?: RpcOptions): UnaryCall<GetDashboardRequest, GetDashboardResponse>;
  /**
   * Update dashboard fields
   *
   * @generated from protobuf rpc: UpdateDashboard
   */
  updateDashboard(input: UpdateDashboardRequest, options?: RpcOptions): UnaryCall<UpdateDashboardRequest, UpdateDashboardResponse>;
  /**
   * Stream dashboard updates (server-side streaming)
   *
   * @generated from protobuf rpc: StreamDashboard
   */
  streamDashboard(input: StreamDashboardRequest, options?: RpcOptions): ServerStreamingCall<StreamDashboardRequest, StreamDashboardResponse>;
  /**
   * Bidirectional streaming for real-time sync
   *
   * @generated from protobuf rpc: SyncDashboard
   */
  syncDashboard(options?: RpcOptions): DuplexStreamingCall<UpdateDashboardRequest, StreamDashboardResponse>;
}
/**
 * The Dashboard service definition
 *
 * @generated from protobuf service dashboard.DashboardService
 */
export class DashboardServiceClient implements IDashboardServiceClient, ServiceInfo {
  typeName = DashboardService.typeName;
  methods = DashboardService.methods;
  options = DashboardService.options;
  constructor(private readonly _transport: RpcTransport) {}
  /**
   * Get current dashboard state
   *
   * @generated from protobuf rpc: GetDashboard
   */
  getDashboard(input: GetDashboardRequest, options?: RpcOptions): UnaryCall<GetDashboardRequest, GetDashboardResponse> {
    const method = this.methods[0],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<GetDashboardRequest, GetDashboardResponse>('unary', this._transport, method, opt, input);
  }
  /**
   * Update dashboard fields
   *
   * @generated from protobuf rpc: UpdateDashboard
   */
  updateDashboard(input: UpdateDashboardRequest, options?: RpcOptions): UnaryCall<UpdateDashboardRequest, UpdateDashboardResponse> {
    const method = this.methods[1],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<UpdateDashboardRequest, UpdateDashboardResponse>('unary', this._transport, method, opt, input);
  }
  /**
   * Stream dashboard updates (server-side streaming)
   *
   * @generated from protobuf rpc: StreamDashboard
   */
  streamDashboard(input: StreamDashboardRequest, options?: RpcOptions): ServerStreamingCall<StreamDashboardRequest, StreamDashboardResponse> {
    const method = this.methods[2],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<StreamDashboardRequest, StreamDashboardResponse>('serverStreaming', this._transport, method, opt, input);
  }
  /**
   * Bidirectional streaming for real-time sync
   *
   * @generated from protobuf rpc: SyncDashboard
   */
  syncDashboard(options?: RpcOptions): DuplexStreamingCall<UpdateDashboardRequest, StreamDashboardResponse> {
    const method = this.methods[3],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<UpdateDashboardRequest, StreamDashboardResponse>('duplex', this._transport, method, opt);
  }
}
